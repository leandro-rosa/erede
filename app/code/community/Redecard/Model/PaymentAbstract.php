<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 *
 */


/**
 * @category   LeandroRosa
 * @package    LeandroRosa_Redecard
 * @author     Leandro Rosa <dev.leandrorosa@gmail.com>
 */

abstract class LeandroRosa_Redecard_Model_PaymentAbstract extends Mage_Payment_Model_Method_Abstract
{
    const PAYMENT_TYPE  = '';
    const CODE          = '';

    protected $_isGateway               = true;
    protected $_canAuthorize            = true;
    protected $_canCapture              = true;
    protected $_canCapturePartial       = false;
    protected $_canRefund               = true;
    protected $_canVoid                 = true;
    protected $_canUseInternal          = false;
    protected $_canUseCheckout          = true;
    protected $_canUseForMultishipping  = true;
    protected $_canOrder                = true;
    protected $_canFetchTransactionInfo = true;

    protected $authorizeRequestBuild;
    protected $authorizeTransportBuild;
    protected $captureRequestBuild;
    protected $captureTransportBuild;
    protected $refundRequestBuild;
    protected $refundTransportBuild;
    protected $configuration;
    protected $client;

    /**
     * {@inheritdoc}
     */
    public function __construct()
    {
        /** @var LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_Request_RequestBuild $authorizeRequestBuild */
        $authorizeRequestBuild = Mage::getModel('leandrorosa_redecard/gateway_eRede_authorize_request_requestBuild');

        /** @var LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_TransportBuild $authorizeTransportBuild */
        $authorizeTransportBuild = Mage::getModel('leandrorosa_redecard/gateway_eRede_authorize_transportBuild');

        /** @var LeandroRosa_Redecard_Model_Gateway_eRede_Capture_Request_RequestBuild $captureRequestBuild */
        $captureRequestBuild = Mage::getModel('leandrorosa_redecard/gateway_eRede_capture_request_requestBuild');

        /** @var LeandroRosa_Redecard_Model_Gateway_eRede_Capture_TransportBuild $captureTransportBuild */
        $captureTransportBuild = Mage::getModel('leandrorosa_redecard/gateway_eRede_capture_transportBuild');

        /** @var LeandroRosa_Redecard_Model_Gateway_eRede_Refund_Request_RequestBuild $refundRequestBuild */
        $refundRequestBuild = Mage::getModel('leandrorosa_redecard/gateway_eRede_refund_request_requestBuild');

        /** @var LeandroRosa_Redecard_Model_Gateway_eRede_Refund_TransportBuild $refundTransportBuild */
        $refundTransportBuild = Mage::getModel('leandrorosa_redecard/gateway_eRede_refund_transportBuild');

        /** @var LeandroRosa_Redecard_Model_Gateway_Client_Client $client */
        $client = Mage::getModel('leandrorosa_redecard/gateway_client_client');

        /** @var LeandroRosa_Redecard_Model_Configuration_eRede $configuration */
        $configuration = Mage::getModel('leandrorosa_redecard/configuration_eRede');

        $this->setAuthorizeRequestBuild($authorizeRequestBuild);
        $this->setAuthorizeTransportBuild($authorizeTransportBuild);
        $this->setCaptureTransportBuild($captureTransportBuild);
        $this->setCaptureRequestBuild($captureRequestBuild);
        $this->setRefundRequestBuild($refundRequestBuild);
        $this->setRefundTransportBuild($refundTransportBuild);
        $this->setClient($client);
        $this->setConfiguration($configuration);
    }

    /**
     * {@inheritdoc}
     */
    public function authorize(Varien_Object $payment, $amount)
    {
        /** @var Mage_Sales_Model_Order_Payment $payment */
        parent::authorize($payment, $amount); // TODO: Change the autogenerated stub

        $request = $this->getAuthorizeRequestBuild()->build(['order' => $payment->getOrder()]);
        $request->setPaymentType(static::PAYMENT_TYPE);
        $transport = $this->getAuthorizeTransportBuild()->build(['request'=>$request]);

        Mage::dispatchEvent(
            'leandrorosa_redecard_creditcard_authorize_before',
            array('payment' => $payment, 'request' => $request, 'transport' => $transport)
        );

        $httpResponse = $this->getClient()->send($transport);
        $dataResponse = \json_decode($httpResponse->getBody(), true);
        $response = new LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_Response_Response($dataResponse);
        $dataTransaction = $response->getData();

        if(isset($dataTransaction['links'])) {
            unset($dataTransaction['links']);
        }

        $payment->setTransactionId($response->getTid());
        $payment->setIsTransactionClosed(0);
        $payment->setTransactionAdditionalInfo(Mage_Sales_Model_Order_Payment_Transaction::RAW_DETAILS, $dataTransaction);
        $payment->setAdditionalInformation($response->getData());

        Mage::dispatchEvent(
            'leandrorosa_redecard_creditcard_authorize_after',
            array('payment' => $payment, 'response' => $response)
        );

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function capture(Varien_Object $payment, $amount)
    {
        /** @var Mage_Sales_Model_Order_Payment $payment */
        parent::capture($payment, $amount);

        $additionalInformation = $payment->getAdditionalInformation();

        if (! isset($additionalInformation['tid'])) {
            Mage::throwException(Mage::helper('leandrorosa_redecard')->__('no has TID in this order'));
        }

        $request = $this->getCaptureRequestBuild()->build(['order' => $payment->getOrder()]);
        $transport = $this->getCaptureTransportBuild()->setTid($additionalInformation['tid'])->build(['request'=>$request]);

        Mage::dispatchEvent(
            'leandrorosa_redecard_creditcard_capture_before',
            array('payment' => $payment, 'request' => $request, 'transport' => $transport)
        );

        $httpResponse = $this->getClient()->send($transport);
        $dataResponse = \json_decode($httpResponse->getBody(), true);
        $response = new LeandroRosa_Redecard_Model_Gateway_eRede_Capture_Response_Response($dataResponse);
        $additionalInformation['capture'] = $response->getData();
        $dataTransaction = $response->getData();

        if(isset($dataTransaction['links'])) {
            unset($dataTransaction['links']);
        }

        $payment->setTransactionId($response->getTid());
        $payment->setIsTransactionClosed(1);
        $payment->setTransactionAdditionalInfo(Mage_Sales_Model_Order_Payment_Transaction::RAW_DETAILS, $dataTransaction);
        $payment->setAdditionalInformation($response->getData());

        Mage::dispatchEvent(
            'leandrorosa_redecard_creditcard_capture_after',
            array('payment' => $payment, 'response' => $response)
        );
        return $this;
    }


    /**
     * {@inheritdoc}
     */
    public function cancel(Varien_Object $payment, $amount = false)
    {
        /** @var Mage_Sales_Model_Order_Payment $payment */
        $additionalInformation = $payment->getAdditionalInformation();

        if (! isset($additionalInformation['tid'])) {
            Mage::throwException(Mage::helper('leandrorosa_redecard')->__('no has TID in this order'));
        }

        $request = $this->getRefundRequestBuild()->build(['order' => $payment->getOrder()]);

        if ($amount) {
            $request->setAmount($amount * 100);
        }

        $transport = $this->getRefundTransportBuild()->setTid($additionalInformation['tid'])->build(['request'=>$request]);

        Mage::dispatchEvent(
            'leandrorosa_redecard_creditcard_cancel_before',
            array('payment' => $payment, 'request' => $request, 'transport' => $transport)
        );

        $httpResponse = $this->getClient()->send($transport);
        $dataResponse = \json_decode($httpResponse->getBody(), true);
        $response = new LeandroRosa_Redecard_Model_Gateway_eRede_Refund_Response_Response($dataResponse);
        $additionalInformation['refund'] = $response->getData();
        $dataTransaction = $response->getData();

        if(isset($dataTransaction['links'])) {
            unset($dataTransaction['links']);
        }

        $payment->setTransactionId($response->getTid());
        $payment->setIsTransactionClosed(1);
        $payment->setTransactionAdditionalInfo(Mage_Sales_Model_Order_Payment_Transaction::RAW_DETAILS, $dataTransaction);
        $payment->setAdditionalInformation($response->getData());

        Mage::dispatchEvent(
            'leandrorosa_redecard_creditcard_capture_after',
            array('payment' => $payment, 'response' => $response)
        );
    }

    public function void(Varien_Object $payment)
    {
        parent::void($payment);
        $this->cancel($payment);
        return $this;
    }

    public function refund(Varien_Object $payment, $amount)
    {
        parent::refund($payment, $amount);
        $this->cancel($payment, $amount);
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_Request_RequestBuild
     */
    protected function getAuthorizeRequestBuild()
    {
        return $this->authorizeRequestBuild;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_Request_RequestBuild authorizeRequestBuild
     * @return $this
     */
    protected function setAuthorizeRequestBuild(LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_Request_RequestBuild $authorizeRequestBuild)
    {
        $this->authorizeRequestBuild = $authorizeRequestBuild;
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_TransportBuild
     */
    protected function getAuthorizeTransportBuild()
    {
        return $this->authorizeTransportBuild;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_TransportBuild $authorizeTransportBuild
     * @return $this
     */
    protected function setAuthorizeTransportBuild(LeandroRosa_Redecard_Model_Gateway_eRede_Authorize_TransportBuild $authorizeTransportBuild)
    {
        $this->authorizeTransportBuild = $authorizeTransportBuild;
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Gateway_Client_Client
     */
    protected function getClient()
    {
        return $this->client;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Gateway_Client_Client $client
     * @return $this
     */
    protected function setClient(LeandroRosa_Redecard_Model_Gateway_Client_Client $client)
    {
        $this->client = $client;
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Gateway_eRede_Capture_Request_RequestBuild
     */
    protected function getCaptureRequestBuild()
    {
        return $this->captureRequestBuild;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Gateway_eRede_Capture_Request_RequestBuild $captureRequestBuild
     * @return $this
     */
    protected function setCaptureRequestBuild(LeandroRosa_Redecard_Model_Gateway_eRede_Capture_Request_RequestBuild $captureRequestBuild)
    {
        $this->captureRequestBuild = $captureRequestBuild;
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Gateway_eRede_Capture_TransportBuild
     */
    protected function getCaptureTransportBuild()
    {
        return $this->captureTransportBuild;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Gateway_eRede_Capture_TransportBuild $captureTransportBuild
     * @return $this
     */
    protected function setCaptureTransportBuild(LeandroRosa_Redecard_Model_Gateway_eRede_Capture_TransportBuild $captureTransportBuild)
    {
        $this->captureTransportBuild = $captureTransportBuild;
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Configuration_eRede
     */
    protected function getConfiguration()
    {
        return $this->configuration;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Configuration_eRede $configuration
     * @return $this
     */
    protected function setConfiguration(LeandroRosa_Redecard_Model_Configuration_eRede $configuration)
    {
        $this->configuration = $configuration;
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Gateway_eRede_Refund_Request_RequestBuild
     */
    protected function getRefundRequestBuild()
    {
        return $this->refundRequestBuild;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Gateway_eRede_Refund_Request_RequestBuild $refundRequestBuild
     * @return $this
     */
    protected function setRefundRequestBuild(LeandroRosa_Redecard_Model_Gateway_eRede_Refund_Request_RequestBuild$refundRequestBuild)
    {
        $this->refundRequestBuild = $refundRequestBuild;
        return $this;
    }

    /**
     * @return LeandroRosa_Redecard_Model_Gateway_eRede_Refund_TransportBuild
     */
    protected function getRefundTransportBuild()
    {
        return $this->refundTransportBuild;
    }

    /**
     * @param LeandroRosa_Redecard_Model_Gateway_eRede_Refund_TransportBuild $refundTransportBuild
     * @return $this
     */
    protected function setRefundTransportBuild(LeandroRosa_Redecard_Model_Gateway_eRede_Refund_TransportBuild $refundTransportBuild)
    {
        $this->refundTransportBuild = $refundTransportBuild;
        return $this;
    }
}
